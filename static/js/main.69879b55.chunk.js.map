{"version":3,"sources":["config.js","App.js","text.js","serviceWorker.js","index.js"],"names":["MenuService","templateArea","toolGroups","name","more","RulesService","emDash","ellipsis","ShortCutsService","EnableTrackChangeService","enabled","PmPlugins","columnResizing","tableEditing","invisibles","hardBreak","WaxSelectionPlugin","services","DisplayBlockLevelService","DisplayToolGroupService","TextBlockLevelService","TextToolGroupService","ListsService","LinkService","InlineAnnotationsService","TrackChangeService","CommentsService","PlaceholderService","ImageService","TablesService","BaseService","BaseToolGroupService","NoteService","TableToolGroupService","ImageToolGroupService","AnnotationToolGroupService","NoteToolGroupService","ListToolGroupService","CodeBlockService","CodeBlockToolGroupService","TrackChangeToolGroupService","GlobalStyle","createGlobalStyle","StyledWax","styled","Wax","props","debug","user","userId","username","App","config","autoFocus","placeholder","fileUpload","file","reader","FileReader","Promise","accept","fail","onload","result","onerror","error","setTimeout","readAsDataURL","renderImage","value","layout","EditoriaLayout","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"qRAoCe,GACbA,YAAa,CACX,CACEC,aAAc,SACdC,WAAY,CACV,OACA,CACEC,KAAM,cACNC,KAAM,CAAC,cAAe,YAAa,cAErC,QACA,QACA,SACA,YACA,SACA,gBAGJ,CACEH,aAAc,cACdC,WAAY,CAAC,UAAW,UAI5BG,aAAc,CAACC,SAAQC,YACvBC,iBAAkB,GAClBC,yBAA0B,CAAEC,SAAS,GAErCC,UAAW,CACTC,2BACAC,yBACAC,IAAW,CAACC,wBACZC,sBAKFC,SAAU,CACR,IAAIC,2BACJ,IAAIC,0BACJ,IAAIC,wBACJ,IAAIC,uBACJ,IAAIC,eACJ,IAAIC,cACJ,IAAIC,2BACJ,IAAIC,qBACJ,IAAIC,kBACJ,IAAIC,qBACJ,IAAIC,eACJ,IAAIC,gBACJ,IAAIC,cACJ,IAAIC,uBACJ,IAAIC,cACJ,IAAIC,wBACJ,IAAIC,wBACJ,IAAIC,6BACJ,IAAIC,uBACJ,IAAIC,uBACJ,IAAIC,mBACJ,IAAIC,4BACJ,IAAIC,gC,kUCvFR,IAAMC,EAAcC,4BAAH,KAYXC,EAAYC,kBAAOC,MAAPD,CAAH,KAEE,SAACE,GAAD,OAAYA,EAAMC,MAAQ,OAAS,UAc9CC,EAAO,CACXC,OAAQ,OACRC,SAAU,QAmBGC,EAhBH,kBACV,kBAAC,WAAD,KACE,kBAACV,EAAD,MACA,kBAACE,EAAD,CACES,OAAQA,EACRC,WAAS,EACTC,YAAY,oBACZC,WAAY,SAACC,GAAD,OAtBE,SAACA,GACnB,IAAMC,EAAS,IAAIC,WACnB,OAAO,IAAIC,SAAQ,SAACC,EAAQC,GAC1BJ,EAAOK,OAAS,kBAAMF,EAAOH,EAAOM,SACpCN,EAAOO,QAAU,kBAAMH,EAAKJ,EAAOQ,QAEnCC,YAAW,kBAAMT,EAAOU,cAAcX,KAAO,QAgBrBY,CAAYZ,IAClCa,MClDO,ulHDmDPC,OAAQC,iBAERvB,KAAMA,MEzCQwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAtB,GACLuB,QAAQvB,MAAMA,EAAMwB,c","file":"static/js/main.69879b55.chunk.js","sourcesContent":["import { emDash, ellipsis } from \"prosemirror-inputrules\";\nimport { columnResizing, tableEditing } from \"prosemirror-tables\";\nimport {\n  AnnotationToolGroupService,\n  ImageService,\n  PlaceholderService,\n  InlineAnnotationsService,\n  LinkService,\n  ListsService,\n  ListToolGroupService,\n  TablesService,\n  TableToolGroupService,\n  BaseService,\n  BaseToolGroupService,\n  DisplayBlockLevelService,\n  DisplayToolGroupService,\n  ImageToolGroupService,\n  TextBlockLevelService,\n  TextToolGroupService,\n  NoteService,\n  NoteToolGroupService,\n  TrackChangeService,\n  CommentsService,\n  CodeBlockService,\n  CodeBlockToolGroupService,\n  TrackChangeToolGroupService,\n} from \"wax-prosemirror-services\";\n\nimport { WaxSelectionPlugin } from \"wax-prosemirror-plugins\";\n\nimport invisibles, {\n  space,\n  hardBreak,\n  paragraph,\n} from \"@guardian/prosemirror-invisibles\";\n\nexport default {\n  MenuService: [\n    {\n      templateArea: \"topBar\",\n      toolGroups: [\n        \"Base\",\n        {\n          name: \"Annotations\",\n          more: [\"Superscript\", \"Subscript\", \"SmallCaps\"],\n        },\n        \"Notes\",\n        \"Lists\",\n        \"Images\",\n        \"CodeBlock\",\n        \"Tables\",\n        \"TrackChange\",\n      ],\n    },\n    {\n      templateArea: \"leftSideBar\",\n      toolGroups: [\"Display\", \"Text\"],\n    },\n  ],\n\n  RulesService: [emDash, ellipsis],\n  ShortCutsService: {},\n  EnableTrackChangeService: { enabled: false },\n\n  PmPlugins: [\n    columnResizing(),\n    tableEditing(),\n    invisibles([hardBreak()]),\n    WaxSelectionPlugin,\n  ],\n\n  // Always load first CommentsService and LinkService,\n  //as it matters on how PM treats nodes and marks\n  services: [\n    new DisplayBlockLevelService(),\n    new DisplayToolGroupService(),\n    new TextBlockLevelService(),\n    new TextToolGroupService(),\n    new ListsService(),\n    new LinkService(),\n    new InlineAnnotationsService(),\n    new TrackChangeService(),\n    new CommentsService(),\n    new PlaceholderService(),\n    new ImageService(),\n    new TablesService(),\n    new BaseService(),\n    new BaseToolGroupService(),\n    new NoteService(),\n    new TableToolGroupService(),\n    new ImageToolGroupService(),\n    new AnnotationToolGroupService(),\n    new NoteToolGroupService(),\n    new ListToolGroupService(),\n    new CodeBlockService(),\n    new CodeBlockToolGroupService(),\n    new TrackChangeToolGroupService(),\n  ],\n};\n","import React, { Fragment } from \"react\";\nimport styled, { createGlobalStyle } from \"styled-components\";\n\nimport { EditoriaLayout } from \"wax-prosemirror-layouts\";\nimport { Wax } from \"wax-prosemirror-core\";\n\nimport config from \"./config\";\nimport text from \"./text\";\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n    padding: 0;\n    overflow-y: hidden;\n  #root {\n    height:100vh;\n    width:100vw;\n  }\n  }\n`;\n\nconst StyledWax = styled(Wax)`\n  .wax-surface-scroll {\n    /* height: ${(props) => (props.debug ? \"50vh\" : \"100%\")}; */\n  }\n`;\n\nconst renderImage = (file) => {\n  const reader = new FileReader();\n  return new Promise((accept, fail) => {\n    reader.onload = () => accept(reader.result);\n    reader.onerror = () => fail(reader.error);\n    // Some extra delay to make the asynchronicity visible\n    setTimeout(() => reader.readAsDataURL(file), 150);\n  });\n};\n\nconst user = {\n  userId: \"1234\",\n  username: \"demo\",\n};\n\nconst App = () => (\n  <Fragment>\n    <GlobalStyle />\n    <StyledWax\n      config={config}\n      autoFocus\n      placeholder=\"Type Something...\"\n      fileUpload={(file) => renderImage(file)}\n      value={text}\n      layout={EditoriaLayout}\n      // onChange={(source) => console.log(source)}\n      user={user}\n    />\n  </Fragment>\n);\n\nexport default App;\n","const content = `<p class=\"paragraph\">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque in commodo lorem, ac fringilla nibh. Fusce placerat nulla rutrum dui pharetra, in ullamcorper mauris malesuada. Aenean non purus at est egestas aliquam. Nam laoreet tempus erat, ut molestie tellus sodales eu. Maecenas a commodo libero. Aliquam ac odio sit amet quam scelerisque fermentum. Vivamus feugiat dignissim sapien, ac rutrum augue vestibulum sit amet. Morbi et malesuada tellus.  Praesent vestibulum, <footnote id=\"89cc963b-8629-45a6-9394-fa229e19f18b\">first note content  </footnote>lorem eu blandit molestie, ligula augue posuere augue, ac fringilla metus ex a elit. Nunc ac ex lacinia ligula dapibus ullamcorper vel sit aet mi.</p><p class=\"paragraph\">Ut mollis velit sed erat pretium, et mollis libero lobortis. Proin est ipsum, fermentum sagittis dictum sit amet, porta quis libero. Nam vehicula scelerisque purus sit amet condimentum. Nulla eu dui ut velit aliquam ultricies sed vitae tortor. Phasellus rhoncus nunc vitae dui tristique venenatis. Maecenas dignissim justo sit amet dapibus molestie. Aenean tristique tortor odio, vel vestibulum tortor fermentum condimentum. Maecenas rutrum, est vitae pellentesque vehicula, enim lacus vehicula erat, vel malesuada purus elit id enim. Nullam laoreet eu neque ut dictum.</p><p class=\"paragraph\">Integer consequat ipsum ipsum, ut tristique ligula egestas et. Etiam dolor mi, dictum eu nunc in, vestibulum ultricies lorem. Fusce tempus risus vitae sodales feugiat. Maecenas et turpis elementum, bibendum ante in, convallis eros. Nullam sit amet efficitur elit. Duis cursus, tortor et egestas tempor, enim dui efficitur sapien, a <span class=\"comment\" data-id=\"23535152-ef95-44c0-a076-6fdf7168573f\" data-conversation=\"[{&quot;content&quot;:&quot;comment&quot;,&quot;displayName&quot;:&quot;demo&quot;,&quot;timestamp&quot;:5319255}]\" data-viewid=\"main\" data-group=\"main\">pellentesque odio ex ac urna. Nam vitae ligula rutrum </span>eros lacinia euismod. Proin vel dignissim nisl. Pellentesque vitae lectus ligula. Ut eget diam ut urna elementum imperdiet eleifend eget neque. Vivamus ac metus facilisis, dictum dui eu, porttitor orci. Aliquam ac ultrices turpis. Donec id velit eu mauris molestie eleifend eu ac justo. Sed blandit erat vel lorem consequat fringilla.</p><p class=\"paragraph\">Aenean ut ante nisi. Donec pellentesque, ex nec imperdiet lobortis, erat ligula ornare sapien, ut pulvinar turpis est in ante. Etiam consectetur risus cursus mauris interdum placerat. Mauris velit erat, finibus ac blandit ac, aliquam eu leo. Vivamus vehicula massa quam, laoreet ultricies turpis faucibus a. Donec luctus ex nibh, in sagittis orci cursus at.<footnote id=\"a9b193fc-9410-48bb-a535-e76ca512e55c\">second note content</footnote> Nullam dictum bibendum mauris, ut condimentum mauris porttitor non. Donec ligula dui, consequat et neque sed, imperdiet convallis sem. Vivamus fringilla vestibulum tellus, in gravida nulla aliquet vel. Pellentesque eu suscipit libero. Aenean tincidunt accumsan consequat. Proin consectetur risus pharetra, laoreet eros at, rhoncus eros. Nam finibus feugiat arcu quis sodales. Fusce ac tincidunt purus.</p><p class=\"paragraph\">Praesent id imperdiet diam, eu facilisis nisl. Vestibulum in lorem pellentesque, elementum orci facilisis, maximus magna. Fusce faucibus ut nibh id viverra. Etiam dapibus ligula sed nibh convallis lacinia. Nunc in finibus purus. Morbi tellus orci, molestie vestibulum purus at, viverra ullamcorper est. Nulla egestas sem nec viverra euismod. Sed ut venenatis nulla, eu rhoncus metus. In maximus et felis at condimentum. Ut sollicitudin eu nisi eu efficitur.</p>`;\nexport default content;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}